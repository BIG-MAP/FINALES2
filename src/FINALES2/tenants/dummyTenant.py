"""This file provides a dummy tenant delivering dummy data.
The dummy data is a list of numeric values generated by the Schwefel function."""

from datetime import datetime
from typing import Any
from uuid import UUID

import numpy as np

from FINALES2 import schemas
from FINALES2.server.schemas import Result
from FINALES2.tenants.referenceTenant import Tenant


# The method producing the dummy data
def run_my_method(method: str, parameters: dict):
    if method == "vibratingTubeDensimetry":
        quant, res, actualParams = vibratingTubeDensimetry(parameters=parameters)
    report = {
        "quantity": quant,
        "quantityValue": res,
        "method": method,
        "actualParameters": actualParams,
    }
    return report


def vibratingTubeDensimetry(parameters: dict):
    params = list(parameters.values())
    # Schwefel function
    params = 1000 * np.array(params) - 500  # rescale onto [-500, 500]
    result = 0
    for index, element in enumerate(params):
        result += -element * np.sin(np.sqrt(np.abs(element)))
    quantity = "density"
    value = np.zeros(3)
    v = (result / 1000 + 0.9816961774673698) / 2.4888170198376653
    value[0] = v
    value[1] = v + np.random.default_rng().normal(v, 0.3)
    value[2] = v - np.random.default_rng().normal(v, 0.03)

    actualParams = {}
    for param in parameters.keys():
        actualParams[param] = parameters[param] + np.random.default_rng().normal(
            parameters[param], 0.1 * parameters[param]
        )
    return quantity, list(value), actualParams


# The method preparing the data for posting
def prepare_my_result(request: dict, data: Any) -> Result:
    method = data["method"]
    if method == "vibratingTubeDensimetry":
        formattedResult = prepare_data_vibratingTubeDensimetry(
            request=request, data=data
        )
    return formattedResult


def prepare_data_vibratingTubeDensimetry(request: dict, data: Any):
    data1 = data
    postResult = Result(
        data={data1["quantity"]: data1["quantityValue"]},
        quantity=data1["quantity"],
        method=[data1["method"]],
        parameters={data1["method"]: data1["actualParameters"]},
        request_uuid=request["uuid"],
        tenant_uuid="1ecd8115-5506-4b1e-b745-fc08fb2bcaee",
    )

    postResultDict = postResult.__dict__
    return postResultDict


# Instantiate the tenant
meta = schemas.GeneralMetaData(
    name="dummyTenant", description="This is a dummy tenant."
)

operator = schemas.User(
    username="operator1",
    password="password1",
    uuid=UUID("{12345678-1234-5678-1234-567812345679}"),
    usergroups=["Project_A"],
)

method = schemas.Method(
    name="vibratingTubeDensimetry",
    quantity="density",
    parameters=["temperature", "ratio", "otherParameter"],
    limitations={
        "temperature": {"minimum": 5, "maximum": 20},
        "ratio": {"minimum": 5000, "maximum": 10000},
        "otherParamter": {"minimum": 1000, "maximum": 16000},
    },
)

quant = schemas.Quantity(
    name="density",
    methods={"vibratingTubeDensimetry": method},
    specifications={"temperature": 15, "ratio": 5464, "otherParameter": 15987},
    is_active=True,
)

quantities = {quant.name: quant}

FINALESServerConfig = schemas.ServerConfig(
    app_title="FINALES2",
    app_description="FINALES2 accepting requests, "
    "managing queues and serving queries",
    app_version="0.0.1",
    host="0.0.0.0",
    port=13371,
)

endRuntime = datetime(2023, 12, 31)

tenantUser = schemas.User(
    username="dummyTenant",
    password="secretPW_forDummyUsr",
    uuid=UUID("{12345678-1234-5678-1234-567812345678}"),
    usergroups=["Project_A"],
)

dummyTenant = Tenant(
    generalMeta=meta,
    operator=operator,
    queue=[],
    quantities=quantities,
    FINALESServerConfig=FINALESServerConfig,
    endRuntime=endRuntime,
    tenantUser=tenantUser,
)

dummyTenant.run()
